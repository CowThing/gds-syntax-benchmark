tool
extends Node


const ITERATIONS : int = int(1e6)
const FILE_HEADER : String = \
"""# GDScript Syntax Benchmarks

Speed comparisons of various syntax alternatives within the GDScript language (Godot game engine).  All code is within [benchmarks.gd](benchmarks.gd), including funcs referenced in results table.

__SEE THE END OF THIS README FOR THE RESULTS TABLE__


## To Run Tests Yourself

* Open the project in Godot
* Click the lone node in the Scene/Node panel
* Click the unchecked box in the Inspector for the exported variable 'Click To Run'
* Wait several seconds for the tests to run (Godot editor may appear frozen during this time)

The script is a 'tool' and clicking this exported variable will trigger a setget function which actually runs the tests.  The results will be printed in the standard output and written to your disk as README.md (clobbering the existing README.md)

## Contributors

Please only add [benchmarks.gd](benchmarks.gd) to your commits.  This entire readme file is automaticaly generated by the script, so please do not commit changes to the readme itself.  Thanks!

## Results

```Godot version: {VERSION}```
"""

export(bool) var click_to_run = false setget set_click_to_run

var outfile : File
var startusec : int = 0
var elapsed : int = 0

# Variables used in tests
var testvar : int = 0
var bigarray : Array = []


func _ready():
	if not Engine.editor_hint:
		run()


func fileinit():
	outfile = File.new()
	if outfile.open("res://README.md", File.WRITE) != OK:
		printerr("ERROR OPENING FILE")
		return false
	
	var string = FILE_HEADER.format({
		VERSION = Engine.get_version_info()["string"],
	})
	outfile.store_string(string)
	
	return true


func printwrite(s):
	print(s)
	outfile.store_string("%s\n" % s)


func set_click_to_run(value):
	if value:
		run()


func run():
	if not fileinit():
		return
	
	bigarray = []
	bigarray.resize(ITERATIONS)
	
	timeit("warmup", true)
	
	compare_funcs_time("array_append", "array_index")
	compare_funcs_time("pool_array_append", "pool_array_index")
	compare_funcs_time("array_read_write", "pool_array_read_write")
	compare_funcs_time("array_front", "array_index_zero")
	compare_funcs_time("array_back", "array_index_negative")
	compare_funcs_time("array_len", "array_size")
	compare_funcs_time("var_script", "var_func")
	compare_funcs_time("var_script", "var_self")
	compare_funcs_time("matches", "ifs")
	compare_funcs_time("dont_call_func", "call_func")
	compare_funcs_time("iter_for", "iter_for_range")
	compare_funcs_time("iter_for", "iter_while")
	compare_funcs_time("iter_for_2", "iter_for_range_2")
	compare_funcs_time("iter_for_2", "iter_while_2")
	compare_funcs_time("iter_for_reverse", "iter_for_range_reverse")
	compare_funcs_time("iter_for_reverse", "iter_while_reverse")
	compare_funcs_time("int_eval", "int_eval_auto")
	compare_funcs_time("array_eval", "array_eval_auto")
	compare_funcs_time("array_eval_auto", "array_eval_empty")
	compare_funcs_time("dict_eval", "dict_eval_auto")
	compare_funcs_time("dict_eval_auto", "dict_eval_empty")
	compare_funcs_time("null_eval", "null_eval_auto")
	compare_funcs_time("inv_int_eval", "inv_int_eval_auto")
	compare_funcs_time("inv_array_eval", "inv_array_eval_auto")
	compare_funcs_time("inv_array_eval_auto", "inv_array_eval_empty")
	compare_funcs_time("inv_dict_eval", "inv_dict_eval_auto")
	compare_funcs_time("inv_dict_eval_auto", "inv_dict_eval_empty")
	compare_funcs_time("inv_null_eval", "inv_null_eval_auto")
	
	outfile.close()


func assign_startusec():
	startusec = OS.get_ticks_usec()


func assign_elapsed():
	elapsed = OS.get_ticks_usec() - startusec # do this first for accuracy
	assert startusec != 0 # then check that startusec had been properly assigned
	startusec = 0 # reset startusec


func timeit(funcname, quiet=false):
	assign_startusec()
	call(funcname)
	assign_elapsed()
	if not quiet:
		print("%s took %d usec" % [funcname, elapsed])


func compare_funcs_time(funcname1, funcname2):
	for fn in [funcname1, funcname2]:
		assert len(fn) <= 24 # for padding output strings
	
	timeit(funcname1, true)
	var elapsed1 = elapsed
	
	timeit(funcname2, true)
	var elapsed2 = elapsed
	
	var fasterfunc
	var slowerfunc
	var fasterelapsed
	var slowerelapsed
	
	if elapsed1 > elapsed2:
		fasterfunc = funcname2
		slowerfunc = funcname1
		fasterelapsed = elapsed2
		slowerelapsed = elapsed1
		
	else:
		fasterfunc = funcname1
		slowerfunc = funcname2
		fasterelapsed = elapsed1
		slowerelapsed = elapsed2
	
	var result = "%24s  ***  %4.f%% faster than  ***  %-24s (%.3f vs %.3f sec)" % [
			fasterfunc.capitalize(),
			100.0 * (float(slowerelapsed) / float(fasterelapsed) - 1.0),
			slowerfunc.capitalize(),
			fasterelapsed / 1e6,
			slowerelapsed / 1e6
	]
	printwrite("    " + result)


func warmup():
	for i in ITERATIONS: pass


func array_append():
	var a : Array = []
	
	for i in ITERATIONS:
		a.append(0)


func array_index():
	var a : Array = []
	a.resize(ITERATIONS)
	
	for i in ITERATIONS:
		a[i] = 0


func pool_array_append():
	var pa : PoolIntArray = PoolIntArray([])
	
	for i in ITERATIONS:
		pa.append(0)


func pool_array_index():
	var pa : PoolIntArray = PoolIntArray([])
	pa.resize(ITERATIONS)
	
	for i in ITERATIONS:
		pa[i] = 0


func array_read_write():
	var x : int = 0
	var a : Array = []
	a.resize(ITERATIONS)
	
	for i in ITERATIONS:
		a[i] = i
		x = a[i]


func pool_array_read_write():
	var x : int = 0
	var pa : PoolIntArray = PoolIntArray([])
	pa.resize(ITERATIONS)
	
	for i in ITERATIONS:
		pa[i] = i
		x = pa[i]


func array_len():
	for i in ITERATIONS: len(bigarray)


func array_size():
	for i in ITERATIONS: bigarray.size()


func array_front():
	for i in ITERATIONS: bigarray.front()


func array_index_zero():
	for i in ITERATIONS: bigarray[0]


func array_back():
	for i in ITERATIONS: bigarray.back()


func array_index_negative():
	for i in ITERATIONS: bigarray[-1]


func var_script():
	for i in ITERATIONS:
		testvar # read
		testvar = 0 # write


func var_func():
	var localvar : int = 0
	
	for i in ITERATIONS:
		localvar # read
		localvar = 0 # write


func var_self():
	for i in ITERATIONS:
		self.testvar # read
		self.testvar = 0 # write


func iter_for_range():
	for i in range(ITERATIONS):
		pass


func iter_for():
	for i in ITERATIONS:
		pass


func iter_while():
	var i : int = 0
	while i < ITERATIONS:
		pass
		i += 1


func iter_for_range_2():
	for i in range(ITERATIONS):
		for j in range(1):
			pass


func iter_for_2():
	for i in ITERATIONS:
		for j in 1:
			pass


func iter_while_2():
	var i : int = 0
	while i < ITERATIONS:
		var j : int = 0
		while j < 1:
			pass
			j += 1
		i += 1


func iter_for_range_reverse():
	var a : Array = []
	a.resize(ITERATIONS)
	
	for i in range(ITERATIONS - 1, -1, -1):
		a[i] = 1


func iter_for_reverse():
	var a : Array = []
	a.resize(ITERATIONS)
	
	for i in ITERATIONS:
		a[ITERATIONS - i - 1] = 1


func iter_while_reverse():
	var a : Array = []
	a.resize(ITERATIONS)
	
	var i : int = ITERATIONS
	while i > 0:
		i -= 1
		a[i] = 1


func matches():
	var x : int = 0
	
	for i in ITERATIONS:
		match x:
			1: pass
			2: pass
			3: pass
			_: pass


func ifs():
	var x : int = 0
	
	for i in ITERATIONS:
		if x == 1: pass
		elif x == 2: pass
		elif x == 3: pass
		else: pass


func dont_call_func():
	for i in ITERATIONS: pass


func passonce(): pass
func call_func():
	for i in ITERATIONS: passonce()


func int_eval():
	var x : int = 1
	
	for i in ITERATIONS:
		if x != 0: pass


func int_eval_auto():
	var x : int = 1
	
	for i in ITERATIONS:
		if x: pass


func array_eval():
	var a : Array = [0]
	
	for i in ITERATIONS:
		if a != []: pass


func array_eval_auto():
	var a : Array = [0]
	
	for i in ITERATIONS:
		if a: pass


func array_eval_empty():
	var a : Array = [0]
	
	for i in ITERATIONS:
		if not a.empty(): pass


func dict_eval():
	var d : Dictionary = {a=0}
	
	for i in ITERATIONS:
		if d != {}: pass


func dict_eval_auto():
	var d : Dictionary = {a=0}
	
	for i in ITERATIONS:
		if d: pass


func dict_eval_empty():
	var d : Dictionary = {a=0}
	
	for i in ITERATIONS:
		if not d.empty(): pass


func null_eval():
	var x : Object = null
	
	for i in ITERATIONS:
		if x != null: pass


func null_eval_auto():
	var x : Object = null
	
	for i in ITERATIONS:
		if x: pass

func inv_int_eval():
	var x : int = 1
	
	for i in ITERATIONS:
		if x == 0: pass


func inv_int_eval_auto():
	var x : int = 1
	
	for i in ITERATIONS:
		if not x: pass


func inv_array_eval():
	var a : Array = [0]
	
	for i in ITERATIONS:
		if a == []: pass


func inv_array_eval_auto():
	var a : Array = [0]
	
	for i in ITERATIONS:
		if not a: pass


func inv_array_eval_empty():
	var a : Array = [0]
	
	for i in ITERATIONS:
		if a.empty(): pass


func inv_dict_eval():
	var d : Dictionary = {a=0}
	
	for i in ITERATIONS:
		if d == {}: pass


func inv_dict_eval_auto():
	var d : Dictionary = {a=0}
	
	for i in ITERATIONS:
		if not d: pass


func inv_dict_eval_empty():
	var d : Dictionary = {a=0}
	
	for i in ITERATIONS:
		if d.empty(): pass


func inv_null_eval():
	var x : Object = null
	
	for i in ITERATIONS:
		if x == null: pass


func inv_null_eval_auto():
	var x : Object = null
	
	for i in ITERATIONS:
		if not x: pass
